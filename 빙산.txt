
#include<stdio.h>
#include<queue>
using namespace std;

int n, m;
int map[301][301];

queue<int>q;
queue<int>q2;

int dx[] = { -1,0,+1,0 };
int dy[] = { 0,-1, 0,+1 };

bool func(int cnt) {
	bool visited[301][301] = { false, };
	int glacier_cnt = 1;

	bool for_flag = false;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (map[i][j] != 0) {
				q2.push(i*1000+j);
				visited[i][j] = true;
				for_flag = true;
				break;
			}
		}
		if (for_flag == true)break;
	}
	while (!q2.empty()) {
		int x = q2.front() % 1000;
		int y = q2.front() / 1000;
		q2.pop();

		int ny, nx;
		for (int i = 0; i < 4; i++) {
			ny = y + dy[i];
			nx = x + dx[i];
			if (ny < 0 || nx < 0 || nx >= m || ny >= n)continue;
			if (visited[ny][nx] == true)continue;
			if (map[ny][nx] == 0)continue;
			q2.push(ny*1000+nx);
			visited[ny][nx] = true;
			glacier_cnt++;
		}
	}
	if (cnt == glacier_cnt)return false;
	else return true;
}

bool bfs() {
	int backup[301][301] = { 0, };

	while (!q.empty()) {

		int glacier_y = q.front() / 1000;
		int glacier_x = q.front() % 1000;
		q.pop();

		int ocean_cnt = 0;
		int ny, nx;
		for (int i = 0; i < 4; i++) {
			ny = glacier_y + dy[i];
			nx = glacier_x + dx[i];
			if (ny < 0 || nx < 0 || nx >= m || ny >= n)continue;
			
			if (map[ny][nx] == 0)ocean_cnt++;
		}

		if (map[glacier_y][glacier_x] - ocean_cnt < 0)
			backup[glacier_y][glacier_x] = 0;
		else 
			backup[glacier_y][glacier_x] = map[glacier_y][glacier_x] - ocean_cnt;

	}
	int glacier_cnt = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			map[i][j] = backup[i][j];
			if (map[i][j] != 0)glacier_cnt++;
		}
	}
	bool func_ret;
	if (glacier_cnt != 0) {
		func_ret = func(glacier_cnt);
	}
	else return false;
}


int main() {
	int year_cnt = 0;
	scanf("%d %d", &n, &m);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			scanf("%d", &map[i][j]);
			if (map[i][j] != 0)q.push(i * 1000 + j);
		}
	}

	bool init_v = func(q.size());
	if (init_v == true) {
		printf("0\n");
		return 0;
	}

	while (true) {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (map[i][j] != 0)q.push(i * 1000 + j);
			}
		}
		if (!q.empty()) {
			year_cnt++;
			bool ret = bfs();
			if (ret == true) {
				//한덩어리가 아닐때
				printf("%d\n", year_cnt);
				return 0;
			}
		}
		else break;
	}
	printf("0\n");
	return 0;
}
