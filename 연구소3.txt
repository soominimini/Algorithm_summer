#include<stdio.h>
#include<queue>
using namespace std;

int n, m;
int map[50][50];
int selected[10];
int ret = 10000000;

int dx[4] = {-1,+1,0,0};
int dy[4] = {0,0,-1,+1};
bool bfs_visited[50][50] = { false, };


struct INFO {
	int x, y;
	int time= 10000000;
	bool wall = false;
	char inactive;
};

int func2() {

	queue<INFO>q;
	INFO tmp_arr[50][50];
	bool visited[50][50] = { false, };
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (map[i][j] == 1) {
				tmp_arr[i][j].wall = true;
			}
			else if (map[i][j] == 2) {
				tmp_arr[i][j].inactive = '*';
			}
		}
	}//초기화
	for (int i = 0; i < m; i++) {
		INFO inf;
		inf.y = selected[i] / 100;
		inf.x = selected[i] % 100;
		inf.time = 0;
		q.push(inf);
		tmp_arr[inf.y][inf.x].inactive = ' ';
		visited[inf.y][inf.x] = true;
	}//처음에 선택된 바이러스 정보가 q로 들어옴

	
	while (!q.empty()) {
		int x = q.front().x;
		int y = q.front().y;
		int time = q.front().time;
		tmp_arr[y][x].time = time;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];
			if (visited[ny][nx] == true) continue;
			else if (tmp_arr[ny][nx].wall == true)continue;
			else if (ny < 0 || ny >= n || nx < 0 || nx >= n) continue;
			else {
				INFO info;
				info.x = nx;
				info.y = ny;
				info.time = time + 1;
				q.push(info);
				visited[ny][nx] = true;
			}
		}

	}
	int time_cnt = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (tmp_arr[i][j].inactive == '*' || tmp_arr[i][j].wall == true)continue;
			else if (tmp_arr[i][j].wall == false && tmp_arr[i][j].time == 10000000) {
				return 10000000;
			}
			else if (tmp_arr[i][j].time > time_cnt)time_cnt = tmp_arr[i][j].time;
		}
	}
	/*
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (tmp_arr[i][j].wall == true) printf("- ");
			else if (tmp_arr[i][j].inactive == '*') printf("* ");
			else printf("%d ", tmp_arr[i][j].time);
		}
		printf("\n");
	}
	*/

	return time_cnt;
}

void func1(int y, int x, int cnt) {
	if (cnt == m) {

		int func2_cnt = func2();

		if (func2_cnt < ret) ret = func2_cnt;
		return;
	}
	else {
		for (int i = y; i < n; i++) {
			for (int j = x ; j < n; j++) {
				if (map[i][j] == 2 && bfs_visited[i][j]==false) {
					selected[cnt++] = i * 100 + j;
					bfs_visited[i][j] = true;
					func1(i, j, cnt);
					cnt--;
					bfs_visited[i][j] = false;
				}
				x = 0;
			}
		}
	}
	return ;
}

int main() {
	
	scanf("%d %d", &n, &m);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			scanf("%d", &map[i][j]);
		}
	}
	func1(0,0,0);
	if (ret == 10000000) printf("-1");
	else printf("%d", ret);
	return 0;
}